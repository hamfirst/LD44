cmake_minimum_required(VERSION 3.0)

include(StormBrewerEngine.cmake)

add_subdirectory(Game)

if(BUILD_CLIENT)  
  add_subdirectory(GameClient)
  add_subdirectory(GameClientExe)

  add_executable(ClientExe Dummy.cpp)

  if(MSVC)
    target_link_libraries(ClientExe GameClientExe)
    target_link_libraries(ClientExe GameClient)
    target_link_libraries(ClientExe Game)
    target_link_libraries(ClientExe Runtime)
    target_link_libraries(ClientExe Engine)
    target_link_libraries(ClientExe Server)
  else()
    target_link_libraries(ClientExe -Wl,--whole-archive GameClientExe -Wl,--no-whole-archive)
    target_link_libraries(ClientExe -Wl,--whole-archive GameClient -Wl,--no-whole-archive)
    target_link_libraries(ClientExe -Wl,--whole-archive Game -Wl,--no-whole-archive)
    target_link_libraries(ClientExe -Wl,--whole-archive Runtime -Wl,--no-whole-archive)
    target_link_libraries(ClientExe -Wl,--whole-archive Engine -Wl,--no-whole-archive)
    target_link_libraries(ClientExe -Wl,--whole-archive Server -Wl,--no-whole-archive)
  endif()
  
  target_link_libraries(ClientExe Runtime)
  target_link_libraries(ClientExe Engine)
  target_link_libraries(ClientExe Foundation)
  target_link_libraries(ClientExe External)
  target_link_libraries(ClientExe StormNetCustomBindings)
  target_link_libraries(ClientExe StormWebrtcClientAPI)
  target_link_libraries(ClientExe StormExpr)
  target_link_libraries(ClientExe StormNet)
  target_link_libraries(ClientExe StormData)
  target_link_libraries(ClientExe binpack)
  target_link_libraries(ClientExe lua)
  target_link_libraries(ClientExe gl3w)
  target_link_libraries(ClientExe LodePNG)
  target_link_libraries(ClientExe resample)
  target_link_libraries(ClientExe vorbis)
  target_link_libraries(ClientExe ogg)
  target_link_libraries(ClientExe freetype)
  
  if(WEB)
    add_custom_command(TARGET ClientExe PRE_LINK COMMAND ${PROJECT_SOURCE_DIR}/BuildFinalAssets.exe WORKING_DIRECTORY ${PROJECT_SOURCE_DIR})
  else()
    
    target_link_libraries(ClientExe StormNetBindingsEnet)
    target_link_libraries(ClientExe StormNet)
    target_link_libraries(ClientExe StormWebrtc)
    target_link_libraries(ClientExe asio)
    target_link_libraries(ClientExe ENet)
    target_link_libraries(ClientExe SDL2)
    target_link_libraries(ClientExe usrsctp-static)
    target_link_libraries(ClientExe mbedtls)
    
    if(MSVC)
      if("${CMAKE_GENERATOR}" MATCHES "(Win64|IA64)")
        target_link_libraries(ClientExe ${PROJECT_SOURCE_DIR}\\External\\Windows\\angle\\x64\\libEGL.lib)
        target_link_libraries(ClientExe ${PROJECT_SOURCE_DIR}\\External\\Windows\\angle\\x64\\libGLESv2.lib)
      else()
        target_link_libraries(ClientExe ${PROJECT_SOURCE_DIR}\\External\\Windows\\angle\\libEGL.lib)
        target_link_libraries(ClientExe ${PROJECT_SOURCE_DIR}\\External\\Windows\\angle\\libGLESv2.lib)
      endif()
      
      target_link_libraries(ClientExe Winmm.lib)
      target_link_libraries(ClientExe Version.lib)
      target_link_libraries(ClientExe Imm32.lib)
    else()
      target_link_libraries(ClientExe stdc++fs)
      target_link_libraries(ClientExe dl pthread)
    endif()
  endif()
endif()

if(BUILD_SERVER)
  add_subdirectory(GameServer)
  add_subdirectory(GameServerExe)

  add_executable(ServerExe Dummy.cpp)
  
  if(MSVC)
    target_link_libraries(ServerExe GameServerExe)
    target_link_libraries(ServerExe GameServer)
    target_link_libraries(ServerExe Game)
    target_link_libraries(ServerExe Runtime)
    target_link_libraries(ServerExe Server)  
  else()
    target_link_libraries(ServerExe -Wl,--whole-archive GameServerExe -Wl,--no-whole-archive)
    target_link_libraries(ServerExe -Wl,--whole-archive GameServer -Wl,--no-whole-archive)
    target_link_libraries(ServerExe -Wl,--whole-archive Game -Wl,--no-whole-archive)
    target_link_libraries(ServerExe -Wl,--whole-archive Runtime -Wl,--no-whole-archive)
    target_link_libraries(ServerExe -Wl,--whole-archive Server -Wl,--no-whole-archive)
  endif()

  target_link_libraries(ServerExe EngineStubs)
  target_link_libraries(ServerExe Foundation)
  target_link_libraries(ServerExe binpack)
  target_link_libraries(ServerExe lua)
  target_link_libraries(ServerExe StormNetCustomBindings)
  target_link_libraries(ServerExe StormNetBindingsEnet)
  target_link_libraries(ServerExe StormNet)
  target_link_libraries(ServerExe StormData)
  target_link_libraries(ServerExe External)
  target_link_libraries(ServerExe StormWebrtc)
  target_link_libraries(ServerExe StormWebrtcServerAPI)
  target_link_libraries(ServerExe asio)
  target_link_libraries(ServerExe ENet)
  target_link_libraries(ServerExe usrsctp-static)
  target_link_libraries(ServerExe mbedtls)
  
  if(UNIX)
    target_link_libraries(ServerExe stdc++fs)
    target_link_libraries(ServerExe -Wl,--whole-archive pthread -Wl,--no-whole-archive)
    target_link_libraries(ServerExe rt m c dl)    

    #set(CMAKE_SHARED_LIBRARY_LINK_C_FLAGS "")
    #set(CMAKE_SHARED_LIBRARY_LINK_CXX_FLAGS "")
    #set(CMAKE_EXE_LINKER_FLAGS "${CMAKE_EXE_LINKER_FLAGS} -static-libgcc -static-libstdc++ -static")

    #set_target_properties(ServerExe PROPERTIES LINK_SEARCH_START_STATIC 1)
    #set_target_properties(ServerExe PROPERTIES LINK_SEARCH_END_STATIC 1)
  endif()
endif()
