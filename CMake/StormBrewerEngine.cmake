cmake_minimum_required(VERSION 3.0)
set_property(GLOBAL PROPERTY USE_FOLDERS ON)

include(CMakeDependentOption)

option(WEB "Emscripten Webassembly Build" OFF)
option(BUILD_CLIENT "Build Client" ON)
CMAKE_DEPENDENT_OPTION(BUILD_TOOLS "Build Client" ON "NOT WEB AND NOT ANDROID AND NOT IOS" OFF)
CMAKE_DEPENDENT_OPTION(BUILD_SERVER "Build Server" ON "NOT WEB AND NOT ANDROID AND NOT IOS" OFF)
CMAKE_DEPENDENT_OPTION(DEVELOPMENT_BUILD "Development Build" ON "BUILD_TOOLS" OFF)

SET(CMAKE_CXX_STANDARD 17)
SET(CMAKE_DEBUG_POSTFIX "")

if (MSVC)
  add_definitions(-D_WINDOWS)
endif()

if (WEB)
  add_definitions(-D_WEB)
endif()

if (IOS)
  add_definitions(-D_IOS)
endif()

if (APPLE AND NOT IOS)
  add_definitions(-D_MACOS)
endif()

if (ANDROID)
  add_definitions(-D_ANDROID)
endif()

if (UNIX AND NOT APPLE)
  add_definitions(-D_LINUX)
endif()

if (DEVELOPMENT_BUILD)
  add_definitions(-D_DEV_BUILD)
endif()

if(WEB)
  set(CMAKE_EXECUTABLE_SUFFIX ".html")
  set(CMAKE_CXX_FLAGS  "${CMAKE_CXX_FLAGS} -s USE_SDL=2 -s WASM=1 -s DISABLE_EXCEPTION_CATCHING=0")
  set(CMAKE_EXE_LINKER_FLAGS "${CMAKE_EXE_LINKER_FLAGS} --preload-file ${PROJECT_SOURCE_DIR}/FinalAssets@/")
  set(CMAKE_EXE_LINKER_FLAGS "${CMAKE_EXE_LINKER_FLAGS} --post-js ${PROJECT_SOURCE_DIR}/Web/WebRTC.js")
  set(CMAKE_EXE_LINKER_FLAGS "${CMAKE_EXE_LINKER_FLAGS} --post-js ${PROJECT_SOURCE_DIR}/Web/Websocket.js")
  set(CMAKE_EXE_LINKER_FLAGS "${CMAKE_EXE_LINKER_FLAGS} --post-js ${PROJECT_SOURCE_DIR}/Web/Audio.js")
  set(CMAKE_EXE_LINKER_FLAGS "${CMAKE_EXE_LINKER_FLAGS} -s EXPORTED_FUNCTIONS=\"['_main','_HandleStormWebrtcConnect','_HandleStormWebrtcMessage','_HandleStormWebrtcDisconnect','_HandleWebsocketConnect','_HandleWebsocketMessage','_HandleWebsocketClose','_HandleMusicLoaded','_HandleMusicLoadFailed','_HandleMusicFinished','_SetAccountName']\"")
  set(CMAKE_EXE_LINKER_FLAGS "${CMAKE_EXE_LINKER_FLAGS} -s TOTAL_MEMORY=134217728 -s LINKABLE=1")

elseif(MSVC)
  add_definitions(-DUNICODE -D_UNICODE)

elseif(UNIX)
  set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -Wno-pragma-once-outside-header")
endif()

add_subdirectory("${PROJECT_SOURCE_DIR}/External/glm")
add_subdirectory("${PROJECT_SOURCE_DIR}/External/binpack")
add_subdirectory("${PROJECT_SOURCE_DIR}/External/lua")

set_target_properties(glm PROPERTIES FOLDER External)
set_target_properties(binpack PROPERTIES FOLDER External)
set_target_properties(lua PROPERTIES FOLDER External)


if(BUILD_CLIENT OR BUILD_TOOLS)
  add_subdirectory("${PROJECT_SOURCE_DIR}/External/gl3w")
  add_subdirectory("${PROJECT_SOURCE_DIR}/External/ogg")
  add_subdirectory("${PROJECT_SOURCE_DIR}/External/lodepng")
  add_subdirectory("${PROJECT_SOURCE_DIR}/External/vorbis")
  add_subdirectory("${PROJECT_SOURCE_DIR}/External/resample")
  add_subdirectory("${PROJECT_SOURCE_DIR}/Shared/Engine")
  
  if (MSVC)
    add_subdirectory("${PROJECT_SOURCE_DIR}/External/Windows/SDL_build")
    add_subdirectory("${PROJECT_SOURCE_DIR}/External/Windows/freetype2")
    
    set_target_properties(SDL2main PROPERTIES FOLDER External)
    set_target_properties(SDL2-static PROPERTIES FOLDER External)
    set_target_properties(freetype PROPERTIES FOLDER External)
    set_target_properties(uninstall PROPERTIES FOLDER External)
  endif()
  
  if(ANDROID)
    add_subdirectory("${PROJECT_SOURCE_DIR}/External/Android/SDL_build")
    add_subdirectory("${PROJECT_SOURCE_DIR}/External/Android/freetype2")
    
    set_target_properties(SDL2main PROPERTIES FOLDER External)
    set_target_properties(SDL2-static PROPERTIES FOLDER External)
    set_target_properties(freetype PROPERTIES FOLDER External)
    set_target_properties(uninstall PROPERTIES FOLDER External)
  endif()

  if(IOS)
    add_subdirectory("${PROJECT_SOURCE_DIR}/External/IOS/SDL_build")
    add_subdirectory("${PROJECT_SOURCE_DIR}/External/IOS/freetype2")
    
    set_target_properties(SDL2main PROPERTIES FOLDER External)
    set_target_properties(SDL2-static PROPERTIES FOLDER External)
    set_target_properties(freetype PROPERTIES FOLDER External)
    set_target_properties(uninstall PROPERTIES FOLDER External)
  endif()

  if(UNIX AND NOT APPLE)
    add_subdirectory("${PROJECT_SOURCE_DIR}/External/Linux/SDL_build")
    
    set_target_properties(SDL2main PROPERTIES FOLDER External)
    set_target_properties(SDL2-static PROPERTIES FOLDER External)
    set_target_properties(uninstall PROPERTIES FOLDER External)
  endif()
  
  set_target_properties(ogg PROPERTIES FOLDER External)
  set_target_properties(vorbis PROPERTIES FOLDER External)
  set_target_properties(lodepng PROPERTIES FOLDER External)
  set_target_properties(resample PROPERTIES FOLDER External)
  set_target_properties(gl3w PROPERTIES FOLDER External)
  set_target_properties(Engine PROPERTIES FOLDER Shared)
endif()

if(WEB)
  add_subdirectory("${PROJECT_SOURCE_DIR}/External/Web/freetype2")
  add_subdirectory("${PROJECT_SOURCE_DIR}/StormTech/StormWebrtcClientAPI")
else()
  add_subdirectory("${PROJECT_SOURCE_DIR}/External/enet")
  add_subdirectory("${PROJECT_SOURCE_DIR}/External/usrsctplib")
  add_subdirectory("${PROJECT_SOURCE_DIR}/External/mbedtls")
  add_subdirectory("${PROJECT_SOURCE_DIR}/External/asio")
  
  add_subdirectory("${PROJECT_SOURCE_DIR}/Shared/EngineStubs")
  add_subdirectory("${PROJECT_SOURCE_DIR}/StormTech/HurricaneDDS")
  add_subdirectory("${PROJECT_SOURCE_DIR}/StormTech/StormSockets")
  add_subdirectory("${PROJECT_SOURCE_DIR}/StormTech/StormBootstrap")
  add_subdirectory("${PROJECT_SOURCE_DIR}/StormTech/StormWebrtc")
  add_subdirectory("${PROJECT_SOURCE_DIR}/StormTech/StormWebrtcServerAPI")
  add_subdirectory("${PROJECT_SOURCE_DIR}/StormTech/StormWebrtcClientAPI")
  
  
  set_target_properties(ENet PROPERTIES FOLDER External)
  set_target_properties(usrsctp PROPERTIES FOLDER External)
  set_target_properties(usrsctp-static PROPERTIES FOLDER External)
  set_target_properties(mbedtls PROPERTIES FOLDER External)
  set_target_properties(asio PROPERTIES FOLDER External)
  
  set_target_properties(EngineStubs PROPERTIES FOLDER Shared)
  set_target_properties(HurricaneDDS PROPERTIES FOLDER StormTech)
  set_target_properties(StormSocketCPP PROPERTIES FOLDER StormTech)
  set_target_properties(StormBootstrap PROPERTIES FOLDER StormTech)
  set_target_properties(StormWebrtc PROPERTIES FOLDER StormTech)
  set_target_properties(StormWebrtcServerAPI PROPERTIES FOLDER StormTech)
  set_target_properties(StormWebrtcClientAPI PROPERTIES FOLDER StormTech)
endif()

add_subdirectory("${PROJECT_SOURCE_DIR}/Shared/Foundation")
add_subdirectory("${PROJECT_SOURCE_DIR}/Shared/Runtime")
add_subdirectory("${PROJECT_SOURCE_DIR}/StormTech/StormData")
add_subdirectory("${PROJECT_SOURCE_DIR}/StormTech/StormNet")
add_subdirectory("${PROJECT_SOURCE_DIR}/StormTech/StormNetCustomBindings")
add_subdirectory("${PROJECT_SOURCE_DIR}/StormTech/StormExpr")

set_target_properties(Foundation PROPERTIES FOLDER Shared)
set_target_properties(Runtime PROPERTIES FOLDER Shared)
set_target_properties(StormData PROPERTIES FOLDER StormTech)
set_target_properties(StormNet PROPERTIES FOLDER StormTech)
set_target_properties(StormNetCustomBindings PROPERTIES FOLDER StormTech)
set_target_properties(StormNetBindingsEnet PROPERTIES FOLDER StormTech)
set_target_properties(StormExpr PROPERTIES FOLDER StormTech)

if(BUILD_SERVER OR BUILD_TOOLS)
  add_subdirectory("${PROJECT_SOURCE_DIR}/External/yajl")
  add_subdirectory("${PROJECT_SOURCE_DIR}/External/libbson")
  add_subdirectory("${PROJECT_SOURCE_DIR}/External/mongoc")

  set_target_properties(yajl PROPERTIES FOLDER External)
  set_target_properties(libbson PROPERTIES FOLDER External)
  set_target_properties(mongoc PROPERTIES FOLDER External)
endif()


if(BUILD_TOOLS)
  add_subdirectory("${PROJECT_SOURCE_DIR}/External/libgit2")
  add_subdirectory("${PROJECT_SOURCE_DIR}/Tools/Wizards/TemplateLib")
  add_subdirectory("${PROJECT_SOURCE_DIR}/Tools/DistTools")
  add_subdirectory("${PROJECT_SOURCE_DIR}/Tools/Wizards/addcode")
  add_subdirectory("${PROJECT_SOURCE_DIR}/Tools/DocumentServer")
  add_subdirectory("${PROJECT_SOURCE_DIR}/Tools/QTUtil")
  add_subdirectory("${PROJECT_SOURCE_DIR}/Tools/Editor")

  if(MSVC)
    set_target_properties(zlib PROPERTIES FOLDER External)
    set_target_properties(regex PROPERTIES FOLDER External)
    set_target_properties(http-parser PROPERTIES FOLDER External)
  endif()

  set_target_properties(git2 PROPERTIES FOLDER External)
  set_target_properties(git2internal PROPERTIES FOLDER External)
  set_target_properties(libgit2_clar PROPERTIES FOLDER External)
  set_target_properties(TemplateLib PROPERTIES FOLDER Tools)
  set_target_properties(DistFetchLib PROPERTIES FOLDER Tools)
  set_target_properties(DistServerLib PROPERTIES FOLDER Tools)
  set_target_properties(DistUploadLib PROPERTIES FOLDER Tools)
  set_target_properties(DistFetcher PROPERTIES FOLDER Tools)
  set_target_properties(DocumentServer PROPERTIES FOLDER Tools)
  set_target_properties(QTUtil PROPERTIES FOLDER Tools)
  set_target_properties(Editor PROPERTIES FOLDER Tools)
endif()

